pipeline {
    agent {
        label 'jenkins-agent' 
    }
    tools {
        nodejs 'nodejs'
    }
    environment {
        APP_Name = "frontend"
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKER_USER = "ranjeeth3302"
        DOCKER_PASS = "dockerhub"
        DOCKER_IMAGE = "${DOCKER_USER}/${APP_Name}"
        GIT_REPO_GIT = "https://github.com/RanjeethAcharya/End-to-End-Kubernetes-Three-Tier-DevSecOps-Project.git"
        GIT_REPO = "https://github.com/RanjeethAcharya/End-to-End-Kubernetes-Three-Tier-DevSecOps-Project"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage("Git Checkout") {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']],
                    userRemoteConfigs: [[credentialsId: 'github', url: "${GIT_REPO_GIT}"]]
                ])
            }
        }
        stage('SonarQube Analysis') {
            steps {
                dir('Application-Code/frontend') {
                    script {
                        withSonarQubeEnv(credentialsId: 'sonarqube') {
                            sh """
                                $SCANNER_HOME/bin/sonar-scanner \
                                -Dsonar.projectName=frontend \
                                -Dsonar.projectKey=frontend \
                                -Dsonar.projectVersion=${env.BUILD_NUMBER}
                            """
                        }
                    }
                }
            }
        }
        // stage('Quality Check') {
        //     steps {
        //         script {
        //             waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube'
        //         }
        //     }
        // }
        stage('Trivy File Scan') {
            steps {
                script {
                    dir('Application-Code/frontend/') {
                        sh 'trivy fs . > trivyfs.txt'
                    }
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                script {
                    dir('Application-Code/frontend') {
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        def dockerImage = docker.build("${DOCKER_IMAGE}:${BUILD_NUMBER}")
                        docker.withRegistry("", 'dockerhub') {
                            dockerImage.push("${BUILD_NUMBER}")
                            dockerImage.push('latest')
                        }
                    }
                }
            }
        }
        // stage("TRIVY Image Scan") {
        //     steps {
        //         script {
        //             sh "docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image ${DOCKER_IMAGE}:${BUILD_NUMBER} --no-progress --scanners vuln --exit-code 0 --severity HIGH,CRITICAL --format table"
        //         }
        //     }
        // }
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image ${DOCKER_IMAGE}:${BUILD_NUMBER} > trivyimage.txt' 
            }
        }
        stage("Git pull") {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']],
                    userRemoteConfigs: [[credentialsId: 'github', url: "${GIT_REPO_GIT}"]]
                ])
            }
        }
        stage('Update Deployment file') {
            steps {
                dir('Kubernetes-Manifests-file/Frontend') {
                    withCredentials([gitUsernamePassword(credentialsId: 'github', gitToolName: 'Default')]) {
                        sh '''
                            git config user.email "ranjeetkumar933342@gmail.com"
                            git config user.name "RanjeethAcharya"
                            sed -i "s|image: ${DOCKER_USER}/${APP_Name}:.*|image: ${DOCKER_USER}/${APP_Name}:${BUILD_NUMBER}|g" deployment.yaml
                            cat deployment.yaml
                            git add deployment.yaml
                            git commit -m "Update deployment Image to version ${BUILD_NUMBER}"
                            git push ${GIT_REPO} HEAD:master
                        '''
                    }
                }
            }
        }
        stage("Cleanup containers") {
            steps {
                script {
                    sh "docker rmi ${DOCKER_IMAGE}:${BUILD_NUMBER}"
                    sh "docker rmi ${DOCKER_IMAGE}:latest"
                }
            }
        }
    }
}
